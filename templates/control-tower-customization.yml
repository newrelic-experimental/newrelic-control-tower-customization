AWSTemplateFormatVersion: 2010-09-09
Description: Control Tower customization that adds in New Relic integration to your aws accounts enrolled using AWS Control Tower.
Parameters:
  NewRelicAccountNumber:
    Type: String
    Description: Your Newrelic account number
    AllowedPattern: '[0-9]+'
  LaunchAccountList:
    Type: String
    Description: Comma delimited list of accounts to be included during initial launch. All new accounts will be automatically included via AWS Control Tower LifeCycleevents.
  NewRelicAccessKey:
    Type: String
    NoEcho: true
    Description: NewRelic NerdGraph User Key
  StackSetName:
    Type: String
    Description: Name of the stackset to be deployed
    Default: NewRelic-Integration 
  StackSetUrl:
    Type: String
    Description: StackSet template URL
    Default: https://wellsiau-quickstart.s3.amazonaws.com/newrelic/templates/newrelic-stack-set.yml
  QSS3BucketName:
    Description: Flexera S3 bucket where the Lambda function package resides, do not modify this unless you are required by Flexera team
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Default: 'wellsiau-quickstart'
    Type: String
  QSS3KeyPrefix:
    Description: Flexera S3 bucket prefix where the Lambda function package resides, do not modify this unless you are required by Flexera team
    AllowedPattern: ^[0-9a-zA-Z-/_]*$
    Default: 'newrelic/'
    Type: String
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - 'lambda_packages/NewRelicCTOnboarding.zip'
        - 'lambda_packages/NewRelicCTRegister.zip'
        - 'lambda_packages/NewRelicCTStackSet.zip'

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  NewRelicOnboardingFunction:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'QSS3KeyPrefix', 'lambda_packages/NewRelicCTOnboarding.zip']]
      Handler: onboarding.lambda_handler
      Runtime: python3.7
      Timeout: 120
      Environment:
        Variables:
          stackSetName: !Ref StackSetName
          newRelicAccId: !Ref NewRelicAccountNumber
          seedAccounts: !Ref LaunchAccountList
          stackSetUrl: !Ref StackSetUrl
          newRelicSecret: !Ref NewRelicCredentials
          newRelicStackSQS: !Ref NewRelicStackSQS
      Role: !GetAtt NewRelicOnboardingFunctionRole.Arn

  NewRelicOnboardingFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Onboarding_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: StackSetInstanceCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStackInstances
            - cloudformation:ListStackInstances
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetInstanceDelete
            Effect: Allow
            Action:
            - cloudformation:DeleteStackSet
            - cloudformation:DeleteStackInstances
            - cloudformation:DescribeStackSetOperation
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStackSet
            - cloudformation:DescribeStackSet
            Resource: '*'
          - Sid: S3Ops
            Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            Resource: arn:aws:s3:::Example*
          - Sid: SQSOps
            Effect: Allow
            Action:
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:ReceiveMessage
            - sqs:GetQueueAttributes
            Resource: !GetAtt NewRelicStackSQS.Arn
          - Sid: PassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource: !Join [':', ['arn:aws:iam:', !Ref 'AWS::AccountId', 'role/service-role/AWSControlTowerStackSetRole' ]]
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  NewRelicCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: NewRelic API Credentials
      Name: NewRelicAPICredential
      SecretString:
        Fn::Join:
        - ''
        - - '{"AccessKey":"'
          - Ref: NewRelicAccessKey
          - '"}'

  NewRelicFirstLaunch:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        !GetAtt NewRelicOnboardingFunction.Arn
    DependsOn:
    - NewRelicOnboardingFunction

  NewRelicStackSQS:
    Type: AWS::SQS::Queue
    Properties: 
      DelaySeconds: 5
      MessageRetentionPeriod: 1209600
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt NewRelicDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 120
      ReceiveMessageWaitTimeSeconds: 10
  
  NewRelicRegisterSQS:
    Type: AWS::SQS::Queue
    Properties: 
      DelaySeconds: 5
      MessageRetentionPeriod: 1209600
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt NewRelicDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 120
      ReceiveMessageWaitTimeSeconds: 10
  
  NewRelicDLQ:
    Type: AWS::SQS::Queue
    Properties: 
      MessageRetentionPeriod: 1209600
  
  NewRelicStackSetFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Register_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: StackSetInstanceOperations
            Effect: Allow
            Action:
            - cloudformation:CreateStackInstances
            - cloudformation:ListStackInstances
            - cloudformation:ListStackSetOperations
            - cloudformation:DescribeStackSetOperation
            - cloudformation:DeleteStackInstances
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetOperations
            Effect: Allow
            Action:
            - cloudformation:DescribeStackSet
            Resource: '*'
          - Sid: SQSOps
            Effect: Allow
            Action:
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:ReceiveMessage
            - sqs:GetQueueAttributes
            Resource: 
            - !GetAtt NewRelicStackSQS.Arn
            - !GetAtt NewRelicRegisterSQS.Arn
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  NewRelicStackSetFunction:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'QSS3KeyPrefix', 'lambda_packages/NewRelicCTStackSet.zip']]
      Handler: stackset.lambda_handler
      Runtime: python3.7
      Timeout: 60
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          stackSetName: !Ref StackSetName
          newRelicAccId: !Ref NewRelicAccountNumber
          stackSetUrl: !Ref StackSetUrl
          newRelicSecret: !Ref NewRelicCredentials
          newRelicStackSQS: !Ref NewRelicStackSQS
          newRelicRegisterSQS: !Ref NewRelicRegisterSQS
      Role: !GetAtt NewRelicStackSetFunctionRole.Arn

  NewRelicStackSetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt NewRelicStackSetFunction.Arn
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt NewRelicStackSQS.Arn
  
  NewRelicStackSetEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 30
      EventSourceArn: !GetAtt NewRelicStackSQS.Arn
      FunctionName: !Ref NewRelicStackSetFunction

  NewRelicRegisterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Register_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: StackSetInstanceOperations
            Effect: Allow
            Action:
            - cloudformation:ListStackInstances
            - cloudformation:ListStackSetOperations
            - cloudformation:DescribeStackSetOperation
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetOperations
            Effect: Allow
            Action:
            - cloudformation:DescribeStackSet
            Resource: '*'
          - Sid: SQSOps
            Effect: Allow
            Action:
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:ReceiveMessage
            - sqs:GetQueueAttributes
            Resource: 
            - !GetAtt NewRelicStackSQS.Arn
            - !GetAtt NewRelicRegisterSQS.Arn
            - !GetAtt NewRelicDLQ.Arn
          - Sid: SecretRead
            Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource:
              Ref: NewRelicCredentials
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  NewRelicRegisterFunction:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'QSS3KeyPrefix', 'lambda_packages/NewRelicCTRegister.zip']]
      Handler: register.lambda_handler
      Runtime: python3.7
      Timeout: 60
      ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          stackSetName: !Ref StackSetName
          newRelicAccId: !Ref NewRelicAccountNumber
          stackSetUrl: !Ref StackSetUrl
          newRelicSecret: !Ref NewRelicCredentials
          newRelicRegisterSQS: !Ref NewRelicRegisterSQS
          newRelicDLQ: !Ref NewRelicDLQ
      Role: !GetAtt NewRelicRegisterFunctionRole.Arn

  NewRelicRegisterPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt NewRelicRegisterFunction.Arn
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt NewRelicRegisterSQS.Arn
  
  NewRelicRegisterEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 30
      EventSourceArn: !GetAtt NewRelicRegisterSQS.Arn
      FunctionName: !Ref NewRelicRegisterFunction
